#pip install -U --no-cache-dir spacy #para baixar fora do cache.

Antes de iniciar um projeto python precisamos do pipenv:
	$ pip install pipenv //apenas na primeira vez

Criando ambiente virtual:
	$ pipenv --python 3.8.3
	-Pelo fato do Python ter diversos pacotes instalados na sua "raiz", os desenvolvedores criaram a necessidade
	de ter vários ambientes separados, ou seja, eu posso ter instalado 19 bibliotecas mas para certo programa
	só vou utilizar 3 delas, ter todas as 19 listadas iria comprometer em peso minha aplicação.

Dai entramos na raiz do projeto e damos:
	$ pipenv install django
	-Para poder ser instalado na lista que o pipenv criou

Para iniciar o projeto
	$ pipenv run django-admin startproject nomedosite

Um projeto pode ter muitos apps, por isso vamos criar um app/módulo dentro do nosso projeto.
	$ pipenv run django-admin startapp blog
	ou
	$ python manage.py startapp blog

O migrate deverá ser utilizado para ligar as classes modelos ao banco de dados
	$ python manage.py migrate

Criando um usuário admin no django, é perfeito para saber alterações e etc.
	$ python manage.py createsuperuser

Após criar um model é necessário fazer o makemigrations para "commitar" as alterações.
	$ python manage.py makemigrations

Criar um requirements.txt
	$ pipenv run pip freeze > requirements.txt